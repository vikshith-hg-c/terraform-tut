2024-08-30T13:23:06.583+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_access_key.access_key["hij"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .status: planned value cty.StringVal("Active") for a non-computed attribute
2024-08-30T13:23:06.584+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_user_policy.instanceManageUser_assume_role["hij"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .policy: planned value cty.StringVal("{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:RunInstances\",\"ec2:StopInstances\",\"ec2:StartInstances\",\"ec2:TerminateInstances\",\"ec2:TerminateInstances\",\"ec2:Describe*\",\"ec2:CreateTags\",\"ec2:RequestSpotInstances\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}]}") does not match config value cty.StringVal("{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"ec2:RunInstances\",\"ec2:StopInstances\",\"ec2:StartInstances\",\"ec2:TerminateInstances\",\"ec2:TerminateInstances\",\"ec2:Describe*\",\"ec2:CreateTags\",\"ec2:RequestSpotInstances\"],\n            \"Resource\": \"*\"\n        }\n    ]\n}")
2024-08-30T13:23:06.584+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_user.ec2_users["hij"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
      - .force_destroy: planned value cty.False for a non-computed attribute
2024-08-30T13:23:06.584+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_user_policy.instanceManageUser_assume_role["ehg"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .policy: planned value cty.StringVal("{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:RunInstances\",\"ec2:StopInstances\",\"ec2:StartInstances\",\"ec2:TerminateInstances\",\"ec2:TerminateInstances\",\"ec2:Describe*\",\"ec2:CreateTags\",\"ec2:RequestSpotInstances\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}]}") does not match config value cty.StringVal("{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"ec2:RunInstances\",\"ec2:StopInstances\",\"ec2:StartInstances\",\"ec2:TerminateInstances\",\"ec2:TerminateInstances\",\"ec2:Describe*\",\"ec2:CreateTags\",\"ec2:RequestSpotInstances\"],\n            \"Resource\": \"*\"\n        }\n    ]\n}")
2024-08-30T13:23:06.585+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_access_key.access_key["abc"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .status: planned value cty.StringVal("Active") for a non-computed attribute
2024-08-30T13:23:06.585+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_user.ec2_users["abc"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
      - .force_destroy: planned value cty.False for a non-computed attribute
2024-08-30T13:23:06.586+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_access_key.access_key["ehg"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .status: planned value cty.StringVal("Active") for a non-computed attribute
2024-08-30T13:23:06.586+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_user.ec2_users["ehg"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .force_destroy: planned value cty.False for a non-computed attribute
      - .path: planned value cty.StringVal("/") for a non-computed attribute
2024-08-30T13:23:06.586+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_iam_user_policy.instanceManageUser_assume_role["abc"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .policy: planned value cty.StringVal("{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ec2:RunInstances\",\"ec2:StopInstances\",\"ec2:StartInstances\",\"ec2:TerminateInstances\",\"ec2:TerminateInstances\",\"ec2:Describe*\",\"ec2:CreateTags\",\"ec2:RequestSpotInstances\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}]}") does not match config value cty.StringVal("{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"ec2:RunInstances\",\"ec2:StopInstances\",\"ec2:StartInstances\",\"ec2:TerminateInstances\",\"ec2:TerminateInstances\",\"ec2:Describe*\",\"ec2:CreateTags\",\"ec2:RequestSpotInstances\"],\n            \"Resource\": \"*\"\n        }\n    ]\n}")
2024-08-30T13:23:06.586+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_vpc.main, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .enable_dns_support: planned value cty.True for a non-computed attribute
      - .instance_tenancy: planned value cty.StringVal("default") for a non-computed attribute
2024-08-30T13:23:06.592+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_subnet.subnet1, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .assign_ipv6_address_on_creation: planned value cty.False for a non-computed attribute
      - .enable_resource_name_dns_a_record_on_launch: planned value cty.False for a non-computed attribute
      - .enable_resource_name_dns_aaaa_record_on_launch: planned value cty.False for a non-computed attribute
      - .enable_dns64: planned value cty.False for a non-computed attribute
      - .ipv6_native: planned value cty.False for a non-computed attribute
      - .map_public_ip_on_launch: planned value cty.False for a non-computed attribute
2024-08-30T13:23:06.599+0530 [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for aws_security_group.allow, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("grafana"), "from_port":cty.NumberIntVal(3000), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(3000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("http"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("https"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("prom"), "from_port":cty.NumberIntVal(9090), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(9090)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("grafana"), "from_port":cty.NumberIntVal(3000), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(3000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("http"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("https"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("prom"), "from_port":cty.NumberIntVal(9090), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(9090)})})
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("DB"), "from_port":cty.NumberIntVal(1433), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(1433)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("http"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("web"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListValEmpty(cty.String), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("DB"), "from_port":cty.NumberIntVal(1433), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(1433)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("http"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("web"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.NullVal(cty.List(cty.String)), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("tcp"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)})})
